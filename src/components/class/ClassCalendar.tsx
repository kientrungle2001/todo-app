import React, { useEffect, useState } from "react";
import { TableGridDetail } from "@/types/detail/TableGridDetail";
import { QlhsGridClassPaymentPeriodSettings } from "@/api/settings/qlhs/QlhsGridClassPaymentPeriodSettings";
import { QlhsGridClassScheduleSettings } from "@/api/settings/qlhs/QlhsGridClassScheduleSettings";
import { classRepository } from "@/api/repositories/ClassRepository";

import { Calendar, dateFnsLocalizer } from "react-big-calendar";
import { format, parse, startOfWeek, getDay } from "date-fns";
import { vi } from "date-fns/locale/vi";
import "react-big-calendar/lib/css/react-big-calendar.css";

interface ClassCalendarProps {
    classId: number;
    detail: TableGridDetail;
}

const ClassCalendar: React.FC<ClassCalendarProps> = ({ classId, detail }) => {
    const [periods, setPeriods] = useState<any[]>([]);
    const [schedules, setSchedules] = useState<any[]>([]);
    const [classEvents, setClassEvents] = useState<any[]>([]);
    const [selectedPeriodId, setSelectedPeriodId] = useState<number | string>("");
    const [currentDate, setCurrentDate] = useState<Date>(new Date()); // üëà controlled date

    useEffect(() => {
        if (detail.settings) {
            const periodSettings = QlhsGridClassPaymentPeriodSettings;
            classRepository.getPaymentPeriods(periodSettings, classId).then((resp: any) => {
                setPeriods(resp.data.items);
            });
        }
    }, [classId, detail.settings]);

    useEffect(() => {
        if (selectedPeriodId) {
            loadSchedule(selectedPeriodId);
        } else {
            setSchedules([]);
            setClassEvents([]);
        }
    }, [selectedPeriodId]);

    useEffect(() => {
        const events: any[] = [];
        schedules.forEach((schedule: any) => {
            const currentTime = new Date(`${schedule.studyDate} ${schedule.studyTime}`);
            const next2Hours = new Date(currentTime.getTime() + 2 * 60 * 60 * 1000);
            events.push({
                title: format(currentTime, "dd/MM/yyyy HH:mm", { locale: vi }), // ti√™u ƒë·ªÅ theo ƒë·ªãnh d·∫°ng Vi·ªát Nam
                start: currentTime,
                end: next2Hours,
            });
        });

        // s·∫Øp x·∫øp theo th·ªùi gian b·∫Øt ƒë·∫ßu tƒÉng d·∫ßn (kh√¥ng b·∫Øt bu·ªôc nh∆∞ng ·ªïn ƒë·ªãnh)
        events.sort((a, b) => a.start.getTime() - b.start.getTime());
        setClassEvents(events);

        // c·∫≠p nh·∫≠t th√°ng/ng√†y hi·ªÉn th·ªã t·ªõi s·ª± ki·ªán s·ªõm nh·∫•t (n·∫øu c√≥)
        if (events.length > 0) {
            setCurrentDate(events[0].start);
        }
    }, [schedules]);

    function loadSchedule(selectedPeriodId: string | number) {
        const selectedPeriod = periods.find(
            (period) => selectedPeriodId == period.paymentPeriodId[0].id
        );
        if (!selectedPeriod) return;

        const { startDate, endDate } = selectedPeriod;
        const scheduleSettings = QlhsGridClassScheduleSettings;
        classRepository
            .getSchedules(scheduleSettings, classId, startDate, endDate)
            .then((resp: any) => {
                setSchedules(resp.data.items);
            });
    }

    const locales = { vi };

    // C·∫•u h√¨nh localizer
    const localizer = dateFnsLocalizer({
        format,
        parse,
        startOfWeek,
        getDay,
        locales,
    });

    return (
        <>
            <div className="d-flex align-items-center justify-content-between">
                <h1>{detail.label}</h1>
                <div style={{ width: "20rem" }}>
                    <select
                        className="form-select"
                        value={selectedPeriodId}
                        onChange={(evt: React.ChangeEvent<HTMLSelectElement>) => {
                            setSelectedPeriodId(evt.target.value);
                        }}
                    >
                        <option value={""}>Ch·ªçn k·ª≥ h·ªçc ph√≠</option>
                        {periods.map((period) => {
                            return (
                                <option
                                    key={"period-" + period.id}
                                    value={period.paymentPeriodId[0].id}
                                >
                                    {period.paymentPeriodName}
                                </option>
                            );
                        })}
                    </select>
                </div>
            </div>

            <Calendar
                localizer={localizer}
                culture="vi"                  // d√πng locale ti·∫øng Vi·ªát
                events={classEvents}
                defaultView="month"
                date={currentDate}            // üëà controlled date
                onNavigate={(date) => setCurrentDate(date)} // üëà b·∫Øt bu·ªôc khi d√πng prop `date`
                views={["month", "week", "day", "agenda"]}
                step={30}
                timeslots={2}
                style={{ height: 600 }}
                messages={{
                    week: "Tu·∫ßn",
                    day: "Ng√†y",
                    month: "Th√°ng",
                    agenda: "Danh s√°ch",
                    today: "H√¥m nay",
                    previous: "Tr∆∞·ªõc",
                    next: "Sau",
                    noEventsInRange: "Kh√¥ng c√≥ s·ª± ki·ªán n√†o",
                    showMore: (total) => `+${total} s·ª± ki·ªán`,
                }}
            />
        </>
    );
};

export default ClassCalendar;
